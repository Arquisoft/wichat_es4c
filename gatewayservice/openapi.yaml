openapi: 3.0.0
info:
  title: Gatewayservice API
  description: Gateway OpenAPI specification.
  version: 0.2.0
servers:
  - url: http://localhost:8000
    description: Development server
  - url: http://SOMEIP:8000
    description: Production server
paths:
  /adduser:
    post:
      summary: Add a new user to the database.
      operationId: addUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: User ID.
                  example: student
                password:
                  type: string
                  description: User password.
                  example: pass
      responses:
        '200':
          description: User added successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    description: User ID
                  password:
                    type: string
                    description: Hashed password
                    example: $2b$10$ZKdNYLWFQxzt5Rei/YTc/OsZNi12YiWz30JeUFHNdAt7MyfmkTuvC
                  _id:
                    type: string
                    description: Identification
                    example: 65f756db3fa22d227a4b7c7d
                  createdAt:
                    type: string
                    description: Creation date.
                    example: '2024-03-17T20:47:23.935Z'
                  ___v:
                    type: integer
                    example: '0'                                        
        '400':
          description: Failed to add user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error information.
                    example: getaddrinfo EAI_AGAIN mongodb
  /health:
    get:
      summary: Check the health status of the service.
      operationId: checkHealth
      responses:
        '200':
          description: Service is healthy.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Health status.
                    example: OK
  /login:
    post:
      summary: Log in to the system.
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: User ID.
                  example: student
                password:
                  type: string
                  description: User password.
                  example: pass
      responses:
        '200':
          description: Login successful. Returns user token, username, and creation date.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: User token.
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NWY3NTZkYjNmYTIyZDIyN2E0YjdjN2QiLCJpYXQiOjE3MTA3MDg3NDUsImV4cCI6MTcxMDcxMjM0NX0.VMG_5DOyQ4GYlJQRcu1I6ICG1IGzuo2Xuei093ONHxw
                  username:
                    type: string
                    description: Username.
                    example: student
                  createdAt:
                    type: string
                    description: Creation date.
                    example: '2024-03-17T20:47:23.935Z'
        '401':
          description: Invalid credentials.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Shows the error info..
                    example: Invalid credentials
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error information.
                    example: Internal Server Error
  /profile/{username}:
    get:
      summary: Get user profile by username.
      operationId: getUserProfile
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStats'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /updateStats:
    post:
      summary: Update user game stats.
      operationId: updateUserStats
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                isCorrect:
                  type: boolean
                timeTaken:
                  type: number
      responses:
        '200':
          description: Stats updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/UserStats'
        '400':
          description: Missing username.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error updating stats.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /incrementGamesPlayed:
    post:
      summary: Increment user's games played.
      operationId: incrementGamesPlayed
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
      responses:
        '200':
          description: Game count incremented.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  gamesPlayed:
                    type: integer
        '400':
          description: Missing username.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error updating game count.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /ranking:
    get:
      summary: Get player ranking.
      operationId: getRanking
      parameters:
        - name: sortBy
          in: query
          schema:
            type: string
            enum: [correctAnswers, wrongAnswers, gamesPlayed]
      responses:
        '200':
          description: Ranking list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserStats'
        '400':
          description: Invalid sort field.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Error retrieving ranking.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /question:
    get:
      summary: Get a randomly generated question.
      operationId: getQuestion
      responses:
        '200':
          description: Successfully generated question.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        '500':
          description: Failed to generate question.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /askllm:
    post:
      summary: Ask the LLM service a question and receive an answer.
      operationId: askLLM
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - question
                - model
                - apiKey
              properties:
                question:
                  type: string
                  example: ¿Cuál es la capital de Alemania?
                model:
                  type: string
                  example: gpt-4
                apiKey:
                  type: string
                  example: sk-123abc...
                correctAnswer:
                  type: string
                  example: Berlín
      responses:
        '200':
          description: Answer from the LLM.
          content:
            application/json:
              schema:
                type: object
                properties:
                  answer:
                    type: string
                    example: La capital de Alemania es Berlín.
        '400':
          description: Missing required fields or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: LLM service error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        _id:
          type: string
        createdAt:
          type: string
        __v:
          type: integer
    UserStats:
      type: object
      properties:
        username:
          type: string
        gamesPlayed:
          type: integer
        correctAnswers:
          type: integer
        wrongAnswers:
          type: integer
        totalTimePlayed:
          type: number
        gameHistory:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
              correct:
                type: integer
              wrong:
                type: integer
              timePlayed:
                type: number
    Question:
      type: object
      properties:
        type:
          type: string
          example: capital
        question:
          type: string
          example: ¿Cuál es la capital de Francia?
        choices:
          type: array
          items:
            type: string
          example: ["París", "Londres", "Roma", "Berlín"]
        answer:
          type: string
          example: París
        image:
          type: string
          format: uri
          example: https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Flag_of_France.svg/320px-Flag_of_France.svg.png
    
    Error:
      type: object
      properties:
        error:
          type: string
